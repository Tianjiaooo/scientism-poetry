name: Deploy to GoDaddy VPS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    # Install dependencies and build frontend
    - name: Build Frontend
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
      run: |
        cd frontend
        npm ci
        npm run build
        cd ..

    # Install dependencies for backend
    - name: Prepare Backend
      run: |
        cd backend
        npm ci
        cd ..

    # Setup SSH and decode key
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        # Write the base64 encoded key to a temporary file
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/encoded_key
        # Decode the key and save it properly
        base64 -d /tmp/encoded_key > ~/.ssh/id_rsa
        # Clean up encoded file
        rm /tmp/encoded_key
        # Set proper permissions
        chmod 600 ~/.ssh/id_rsa
        # Add host to known_hosts
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    # Create deployment script
    - name: Create deploy script
      run: |
        echo '#!/bin/bash
        
        # Stop existing PM2 processes
        pm2 stop scientism-poetry-backend || true
        pm2 delete scientism-poetry-backend || true

        # Remove old backend files
        rm -rf /var/www/scientism-poetry/backend/*

        # Copy new backend files
        cp -r ./backend/* /var/www/scientism-poetry/backend/

        # Install backend dependencies
        cd /var/www/scientism-poetry/backend
        npm ci --production

        # Start backend with PM2
        pm2 start server.js --name scientism-poetry-backend

        # Remove old frontend files
        rm -rf /var/www/scientism-poetry/frontend/*

        # Copy new frontend files
        cp -r ./frontend/build/* /var/www/scientism-poetry/frontend/

        # Reload Nginx
        sudo systemctl reload nginx' > deploy.sh
        chmod +x deploy.sh

    # Deploy to VPS using SSH
    - name: Deploy to VPS
      run: |
        # Create a temporary directory for deployment
        mkdir -p /tmp/scientism-poetry-deploy
        cp -r frontend/build backend deploy.sh /tmp/scientism-poetry-deploy/
        
        # Use scp to copy files to the server
        scp -i ~/.ssh/id_rsa -P ${{ secrets.VPS_PORT }} -r /tmp/scientism-poetry-deploy/* ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/tmp/scientism-poetry-deploy/
        
        # Clean up local temporary directory
        rm -rf /tmp/scientism-poetry-deploy
    
    # Confirm files on remote server
    - name: Verify Files on VPS
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "ls -la /tmp/scientism-poetry-deploy"
      
    # Execute deployment script
    - name: Execute deploy script
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} '
          cd /tmp/scientism-poetry-deploy && 
          sudo ./deploy.sh &&
          rm -rf /tmp/scientism-poetry-deploy
        '

    # Verify deployment
    - name: Verify deployment
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} '
          pm2 list &&
          curl -s http://localhost:5000/api/health &&
          echo "Deployment verification complete"
        '

    # Cleanup
    - name: Cleanup
      if: always()
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} '
          rm -rf /tmp/scientism-poetry-deploy
        '
